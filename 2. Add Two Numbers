//


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
      int carry = 0;
      int sum =0;
      ListNode dummyhead = new ListNode(0);//creating a dummylist
      ListNode pointerInDummy = dummyhead;
      while(l1!= null && l2!=null)
      {   
          sum = l1.val+l2.val+carry;
         carry = sum/10;
         System.out.println(sum);
         ListNode node = new ListNode(sum%10);
         pointerInDummy.next = node;
         pointerInDummy = pointerInDummy.next;
         if(l1.next == null && l2.next != null)
         {
             l1 = new ListNode(0);
             l2 = l2.next;
         }
         else if(l2.next == null && l1.next!=null){
             l2 = new ListNode(0);
             l1 = l1.next;
         }
         else{
         l1 = l1.next;
         l2 = l2.next;
         }
      } 
      if(carry != 0)
      {
          pointerInDummy.next = new ListNode(carry);
      }
      return dummyhead.next; 
    }
}

Time complexity O(max(m,n))
Space complexity O(max(m,n))
